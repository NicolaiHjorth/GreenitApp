@page "/CreatePost"
@using Domain.Models
@using Domain.DTOs
@using HttpClients.ClientInterfaces
@using System.Security.Claims
@inject IPostService postService
@inject IUserService userService
@inject NavigationManager navMgr
@attribute [Authorize]
    
    @if (users == null)
    {
        <label>Loading users...</label>
    }
    else if (!users.Any())
    {
        <label>No users, you cannot create a Todo without assignee.</label>
    }
    else
    {
        <h3>Create Post</h3>
        <div class="form-group field my-2">
            <label>Title</label><br/>
            <input type="text" @bind="postTitle" placeholder="Enter a title..." style="width: 400px;"/>
        </div>
        <div class="form-group field my-3">
            <label>Content</label><br/>
            <textarea @bind="postContent" placeholder="Write the content of your post here" style="width: 400px; height: 300px;"></textarea>
        </div>
        <div class="button-row">
            @if (!string.IsNullOrEmpty(msg))
            {
                <label style="color: red">@msg</label>
            }
            <button @onclick="Create" class="btn btn-success my-3">Publish Post</button>
        </div>
    }

@code {
    
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    private string? name;
    private IEnumerable<Claim>? userClaims;
    private bool isLoggedIn;
    
    private IEnumerable<User>? users;
    private int userId;
    private string postTitle = "";
    private string postContent = "";

    private string msg = "";

    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            users = await userService.AsyncGetUser();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        isLoggedIn = user.Identity != null;
        
        if (!isLoggedIn) return;
        
        userClaims = user.Claims;
        name = user.Identity!.Name;
        
        var idClaim = userClaims.FirstOrDefault(claim => claim.Type == "id");
        if (idClaim != null)
        {
            userId = int.Parse(idClaim.Value);
        }


    }

    private async Task Create()
    {
        msg = "";
        if (string.IsNullOrEmpty(postTitle))
        {
            msg = "Title cannot be empty!";
            return;
        }
        if (string.IsNullOrEmpty(postContent))
        {
            msg = "Content cannot be empty!";
            return;
        }


        try
        {
            PostCreationDto dto = new(userId, postTitle, postContent, "");
            await postService.CreateAsync(dto);
            navMgr.NavigateTo("/ViewPosts");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    } 
    
}