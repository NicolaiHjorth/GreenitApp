@page "/ViewPosts"
@using Domain.Models
@using HttpClients.ClientInterfaces
@inject IPostService postService

<h3>Posts</h3>
<div class="d-flex flex-row" style="margin: auto">
    <div style="margin-right: 15px">
        <button style="width: 110px" @onclick="@(() => doShowFilters = !doShowFilters)" alt="Funnel">@(doShowFilters ? "Hide Filters" : "Show Filters")</button>
    </div>
    <div>
        @if (doShowFilters)
        {
            <div class="d-flex flex-row">
            <div class="filter">
                <label>Username:</label>
                <input type="text" @bind="usernameFilter" style="margin-right: 15px"/>
            </div>
            <div class="filter">
                <label>Title contains:</label>
                <input type="text" @bind="titleContainsFilter" style="margin-right: 15px"/>
            </div>
            <div class="filter">
                <label>Content contains:</label>
                <input type="text" @bind="contentContainsFilter" style="margin-right: 5px"/>
            </div>
            <div>
                <button @onclick="LoadPosts">Apply filters</button>
            </div>
            </div>
        }
    </div>
</div>


@if (posts == null)
{
}
else if (!posts.Any())
{
    <p>No Posts to display</p>
}
else
{

    @foreach (var item in posts)
    {
        <a href="/viewSinglePost/@item.Id" style="text-decoration: none; color: black;">
        <PostCard Title="@item.Title"  UserName="@item.Owner.UserName" ItemId="@item.Id"/>
        </a>
    }
}
@if (!string.IsNullOrEmpty(msg))
{
    <label style="color: red">@msg</label>
}

@code {
    private IEnumerable<Post>? posts;
    private string msg = "";

    private bool doShowFilters = false;

    private string? usernameFilter;
    private string? contentContainsFilter;
    private string? titleContainsFilter;
    
    
    protected override async Task OnInitializedAsync()
    {
    // This method will be invoked when the page is first initialized.
        await LoadPosts();
    }

    private async Task LoadPosts()
    {
        try
        {
            posts = await postService.GetAsync(usernameFilter, titleContainsFilter, contentContainsFilter);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
    

}